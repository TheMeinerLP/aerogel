/*
 * This file is part of aerogel, licensed under the MIT License (MIT).
 *
 * Copyright (c) 2021 Pasqual K. and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

plugins {
  id 'org.cadixdev.licenser' version '0.6.1'
  id 'com.github.johnrengelman.shadow' version '7.0.0'
  id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

allprojects {
  group 'io.github.derklaro'
  version '1.0.0'

  defaultTasks 'build', 'checkLicenses', 'test', 'shadowJar'

  apply plugin: 'signing'
  apply plugin: 'checkstyle'
  apply plugin: 'java-library'
  apply plugin: 'maven-publish'
  apply plugin: 'org.cadixdev.licenser'

  repositories {
    mavenLocal()
    mavenCentral()
  }

  dependencies {
    // runtime dependencies
    implementation group: 'org.ow2.asm', name: 'asm', version: '9.2'
    implementation group: 'jakarta.inject', name: 'jakarta.inject-api', version: '2.0.0'
    // testing
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.8.1'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.8.1'
    testRuntimeOnly group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.8.1'
    // testing of the jakarta integration
    testImplementation group: 'jakarta.inject', name: 'jakarta.inject-tck', version: '2.0.1'
    // bug spotting
    compileOnly group: 'org.jetbrains', name: 'annotations', version: '22.0.0'
  }

  test {
    useJUnitPlatform()
  }

  java {
    withSourcesJar()
    // javadoc is only required for java projects - we use dokka on kotlin projects
    if (!project.name.contains('kotlin')) {
      withJavadocJar()
    }
  }

  javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
      options.addBooleanOption('html5', true)
    }
  }

  compileJava {
    sourceCompatibility = '8'
    targetCompatibility = '8'

    options.encoding = 'UTF-8'
  }

  publishing {
    publications {
      create("library", MavenPublication.class) {
        from project.components.java

        pom {
          name = project.name
          url = 'https://github.com/derklaro/aerogel'

          licenses {
            license {
              name = 'The MIT License'
              url = 'https://opensource.org/licenses/MIT'
            }
          }

          developers {
            developer {
              name = 'Pasqual Koschmieder'
              email = 'pasqual.koschmieder@gmail.com'
            }
          }

          scm {
            url = 'https://github.com/derklaro/aerogel'
            connection = 'scm:git:git://github.com/derklaro/aerogel.git'
            developerConnection = 'scm:git:ssh://github.com/derklaro/aerogel.git'
          }

          issueManagement {
            system = 'GitHub Issues'
            url = 'https://github.com/derklaro/aerogel/issues'
          }

          afterEvaluate {
            description = project.description
          }
        }
      }
    }
  }

  signing {
    useGpgCmd()
    sign publishing.publications.library
  }

  checkstyle {
    toolVersion = '9.0'
  }

  tasks.withType(Checkstyle) {
    maxErrors = 0
    maxWarnings = 0
    configFile = project.rootProject.file('checkstyle.xml')
  }

  license {
    include '**/*.kt'
    include '**/*.java'
    include '**/*.gradle'
    header = project.rootProject.file('license_header.txt')
  }

  shadowJar {
    // base settings of the output jar
    archiveVersion.set(null)
    archiveClassifier.set(null)
    archiveBaseName.set(project.name)
    // relocate internal dependencies to prevent compatibility issues
    relocate 'org.objectweb.asm', 'aerogel.relocate.asm'
    // auto remove all classes which we don't need in the final jar
    minimize()
  }

  tasks.withType(AbstractArchiveTask) {
    reproducibleFileOrder = true
    preserveFileTimestamps = false
  }
}

description = 'A very lightweight jvm dependency injection framework'

nexusPublishing {
  repositories {
    sonatype {
      nexusUrl.set(uri('https://s01.oss.sonatype.org/service/local/'))
      snapshotRepositoryUrl.set(uri('https://s01.oss.sonatype.org/content/repositories/snapshots/'))

      username.set(project.property('ossrhUsername'))
      password.set(project.property('ossrhPassword'))
    }
  }

  useStaging.set(!project.rootProject.version.endsWith('-SNAPSHOT'))
}
